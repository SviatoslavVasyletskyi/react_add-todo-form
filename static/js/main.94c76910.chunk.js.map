{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","completed","title","TodoList","todos","map","getUser","userId","usersFromServer","find","todosWithUsers","App","useState","setTitle","tasks","setTasks","chosenUserId","setChosenUserId","formSubmitted","setFormSubmitted","newTaskId","listOfTasks","ids","task","Math","max","action","method","onSubmit","event","preventDefault","trim","newTodo","type","placeholder","value","onChange","target","replace","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94c76910.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype UserInfoProps = {\n  user: User\n};\n\nexport const UserInfo = ({ user } : UserInfoProps) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype ToDoInfoProps = {\n  todo: Todo\n};\n\nexport const TodoInfo = ({ todo }: ToDoInfoProps) => {\n  const className = `TodoInfo ${todo.completed ? 'TodoInfo--completed' : ''}`;\n\n  return (\n    <article className={className} data-id={todo.id}>\n      <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n      {todo.user\n      && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype TodoListProps = {\n  todos: Todo[],\n};\n\nexport const TodoList = ({ todos }: TodoListProps) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n\n  </section>\n);\n","import './App.scss';\nimport { useState } from 'react';\nimport todosFromServer from './api/todos';\nimport usersFromServer from './api/users';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n  return foundUser || null;\n}\n\nconst todosWithUsers = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App = () => {\n  const [title, setTitle] = useState<string>('');\n  const [tasks, setTasks] = useState<Todo[]>(todosWithUsers); // Инициализировать задачи, содержащие информацию о пользователях\n  const [chosenUserId, setChosenUserId] = useState<number>(0);\n  const [formSubmitted, setFormSubmitted] = useState<boolean>(false);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value.replace(/[^a-zA-Zа-яА-Я0-9\\s]/g, ''));\n  };\n\n  const newTaskId = (listOfTasks: Todo[]) => {\n    const ids = listOfTasks.map(task => task.id);\n    const maxId = Math.max(...ids);\n\n    return maxId + 1;\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setFormSubmitted(true);\n\n    if (title.trim() !== '' && chosenUserId) {\n      const newTodo = {\n        id: newTaskId(tasks),\n        title,\n        completed: false,\n        userId: +chosenUserId,\n        user: getUser(+chosenUserId),\n      };\n\n      setTasks([...tasks, newTodo]);\n      setTitle('');\n      setChosenUserId(0);\n      setFormSubmitted(false);\n    }\n  };\n\n  const todos = () => tasks.map(todo => ({\n    ...todo,\n    user: getUser(todo.userId) || null,\n  }));\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={title}\n              onChange={handleTitleChange}\n            />\n            {formSubmitted && title.trim() === '' && (\n              <span className=\"error\">Please enter a title</span>\n            )}\n          </label>\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              value={chosenUserId}\n              onChange={(event) => setChosenUserId(+event.target.value)}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n              {usersFromServer.map(user => (\n                <option key={user.id} value={user.id}>{user.name}</option>\n              ))}\n            </select>\n            {formSubmitted && !chosenUserId && (\n              <span className=\"error\">Please choose a user</span>\n            )}\n          </label>\n        </div>\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n      <div className=\"App\">\n        <TodoList todos={todos()} />\n      </div>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}